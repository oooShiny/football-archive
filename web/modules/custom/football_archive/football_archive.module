<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\Node;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;


/**
 * Implements hook_entity_presave().
 */
function football_archive_entity_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'game_video') {
    if ($entity->field_teams_involved->isEmpty()) {
      $home = $entity->field_home_team->target_id;
      $away = $entity->field_away_team->target_id;
      $field_teams_involved[] = ['target_id' => $home];
      $field_teams_involved[] = ['target_id' => $away];
      $entity->set('field_teams_involved', $field_teams_involved);
    }

    // Set PFR link field.
    // https://www.pro-football-reference.com/boxscores/200509180car.htm
    if ($entity->field_pfr_game_link->isEmpty() && !$entity->field_date->isEmpty()) {
      $away_team = $entity->field_away_team->entity;
      $away = $away_team->get('field_pfr_id')->value;
      $game_date = $entity->field_date->value;
      $date = str_replace('-', '',$entity->field_date->value);
      $game_id = $date . '0' . strtolower($away);
      $pfr_link = 'https://www.pro-football-reference.com/boxscores/' . $game_id . '.htm';
      $entity->set('field_pfr_game_link', $pfr_link);
    }
  }
}

/**
 * Implements hook_cron().
 */
function football_archive_cron() {
  // Bunny.net variables.
  $library = '125197';
  $access_key = '7b4d7df9-f924-4cf7-835262219e9c-f51b-4d5e';

  // Get all video nodes, organize them by video ID.
  $video_nodes = football_archive_get_video_nodes();
  // Get all team names -> node IDs.
  $team_names = football_archive_get_team_names();
  // Get all video categories for non-game videos.
  $video_categories = football_archive_get_video_categories();
  // Get all NFL games.
  $all_games = football_archive_get_all_games();

  // Fetch data from bunny.net.
  $client = new Client();
  $folders = [];
  try {
    // Get all folders in the library.
      $response = $client->get(
      'https://video.bunnycdn.com/library/'.$library.'/collections?page=1&itemsPerPage=100&orderBy=date',
      [
        'headers' => [
          'AccessKey' => $access_key,
          'accept' => 'application/json',
        ]
      ]
    );
    $result = json_decode($response->getBody(), TRUE);
    foreach ($result['items'] as $folder) {
      $folders[$folder['guid']] = $folder['name'];
    }
  }
  catch (GuzzleException $e) {
    // log exception
  }

  try {
    // Get all videos in the library.
    $response = $client->get(
      'https://video.bunnycdn.com/library/'.$library.'/videos?page=1&itemsPerPage=500&orderBy=date',
      [
        'headers' => [
          'AccessKey' => $access_key,
          'accept' => 'application/json',
        ]
      ]
    );
    $result = json_decode($response->getBody(), TRUE);
    foreach ($result['items'] as $video) {
      // Video doesn't exist, so create a new one.
      if (!array_key_exists($video['guid'], $video_nodes)) {
        $video_fid = $video['collectionId'];
        // If this video is in a game folder, create new game_video node.
        if (str_contains($folders[$video_fid], 'Games')) {
          $title_parts = explode(':', $video['title']);
          $season_week = explode(' ', $title_parts[0]);
          $season = array_shift($season_week);
          $w = implode(' ', $season_week);

          // The second part of the title should be "Team1 @ Team2".
          if (str_contains($title_parts[1], '@')) {
            // Get team nids from Team names in title.
            $teams = explode(' @ ', $title_parts[1]);
            $home = $team_names[trim($teams[0])];
            $away = $team_names[trim($teams[1])];

            // Get week from field values.
            $week_values = FieldConfig::load('node.game_video.field_week')
              ->getFieldStorageDefinition()
              ->getSettings()['allowed_values'];
            $week = array_search($w, $week_values);

            $timestamp = $all_games[$season][$week][trim($teams[1])]['game_date'];
            $date = date('Y-m-d', $timestamp);
            $node = Node::create([
              'type' => 'game_video',
              'field_original_video_title' => $video['title'],
              'field_season' => $season,
              'field_week' => $week,
              'field_home_team' => $home,
              'field_away_team' => $away,
              'field_date' => $date,
            ]);
          }
          else {
            // @todo: Create a list of games that need to be renamed.
            continue;
          }
        }
        // Otherwise, this is a non-game video.
        else {
          $node = Node::create([
            'type' => 'non_game_video',
          ]);

          // Figure out video tags from the title.
          // Yearbook videos.
          if (str_contains($video['title'], 'Yearbook')) {
            $node->set('field_video_category', ['target_id' => $video_categories['Yearbook']]);
            $title_parts = explode(' ', $video['title']);
            if (array_key_exists($title_parts[1], $team_names)) {
              $node->set('field_team_s_involved', ['target_id' => $team_names[$title_parts[1]]]);
            }
            if (is_numeric($title_parts[0])) {
              $node->set('field_season', $title_parts[0]);
            }
          }
          // NFL Films videos.
          if (str_contains($video['title'], 'NFL Films')) {
            $node->set('field_video_category', ['target_id' => $video_categories['NFL Films Special']]);
          }
          if (str_contains($video['title'], 'Super Bowl')) {
            $node->set('field_video_category', ['target_id' => $video_categories['Super Bowl']]);
          }

          else {
            // Don't pull in videos we haven't categorized yet.
            continue;
          }
          $node->set('title', $video['title']);
        }

        $node->set('field_video_id', $video['guid']);
        $node->set('field_video_collection_id', $video['collectionId']);
        $node->set('field_video_length', $video['length']);
        $node->set('field_views', $video['views']);
        $node->set('field_average_watch_time', $video['averageWatchTime']);
        $node->set('field_total_watch_time', $video['totalWatchTime']);
        $node->save();
      }
      // Video already exists, update the video stats.
      else {
        $node = Node::load($video_nodes[$video['guid']]);
        // Update the title for non games.
        if ($node->bundle() == 'non_game_video') {
          $node->set('title', $video['title']);
        }
        $node->set('field_views', $video['views']);
        $node->set('field_average_watch_time', $video['averageWatchTime']);
        $node->set('field_total_watch_time', $video['totalWatchTime']);
        $node->save();
      }
    }

  }
  catch (GuzzleException $e) {
    // log exception
  }
}

function football_archive_get_team_names() {
  $nids = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('type','team')
    ->execute();
  $team_names = [];
  foreach (Node::loadMultiple($nids) as $team) {
    $team_names[$team->label()] = $team->id();
    if ($team->field_team_name_history->getValue()) {
      foreach ($team->field_team_name_history->referencedEntities() as $paragraph) {
        $name = $paragraph->get('field_team_name')->value;
        $team_names[$name] = $team->id();
      }
    }
  }
  return $team_names;
}

function football_archive_get_video_nodes() {
  $nids = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('type',['game_video', 'non_game_video'], 'IN')
    ->execute();
  $video_nodes = [];
  foreach (Node::loadMultiple($nids) as $video) {
    $video_nodes[$video->get('field_video_id')->value] = $video->id();
  }
  return $video_nodes;
}

function football_archive_get_video_categories() {
  $video_categories = [];
  $terms =\Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadTree('video_category', 0, NULL, TRUE);
  foreach ($terms as $term) {
    $video_categories[$term->getName()] = $term->id();
  }
  return $video_categories;
}


/**
 * Get all games from custom table.
 */
function football_archive_get_all_games() {
  $database = \Drupal::database();
  $query = $database->query("SELECT * FROM {all_games}");
  $games = [];
  foreach ($query->fetchAllAssoc('id') as $g) {
    $games[$g->schedule_season][$g->schedule_week][$g->team_home] = [
      'game_date' => $g->schedule_date,
    ];
  }
  return $games;
}
